{"version":3,"sources":["components/InputTodo.js","components/subtasks/InputSubtasks.js","components/subtasks/ListSubtasks.js","components/EditTodo.js","components/ListTodo.js","components/SideBar.js","components/TaskBox.js","meileng.jpeg","components/Heading.js","App.js","reportWebVitals.js","index.js"],"names":["InputToDo","useState","description","setDescription","onSubmitForm","e","a","preventDefault","body","fetch","method","headers","JSON","stringify","document","querySelector","value","console","error","message","className","onSubmit","type","placeholder","onChange","target","autoComplete","InputSubtasks","todo","task_id","todo_id","submitSubtask","id","ListSubtasks","subtaskList","setSubtaskList","getSubtasks","response","json","jsonData","updateSubtask","subtask_id","submitThis","deleteTodo","filter","subtask","useEffect","map","defaultValue","onBlur","getElementById","onClick","EditTodo","updateDescription","data-toggle","data-target","data-dismiss","ListTodo","todos","setTodos","getTodos","scope","SideBar","onSelect","itemId","items","title","subNav","TaskBox","InputTodo","Heading","href","Avatar","alt","src","profile","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+PAoDeA,EA7CG,WAGd,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAY,uCAAG,WAAMC,GAAN,eAAAC,EAAA,yDAGjBD,EAAEE,iBAHe,SAKO,KAAhBL,EALS,8CASHM,EAAO,CAAEN,eATN,SAUcO,MAAM,6CAA8C,CACvEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BH,KAAMI,KAAKC,UAAUL,KAbhB,cAiBTM,SAASC,cAAc,aAAaC,MAAQ,GAjBnC,0DAoBbC,QAAQC,MAAM,KAAIC,SApBL,0DAAH,sDAwBlB,OACI,cAAC,WAAD,UACE,uBAAMC,UAAU,SAASC,SAAUjB,EAAnC,UACE,uBAAOkB,KAAK,OACZF,UAAU,wBACVG,YAAa,aACbC,SAAU,SAAAnB,GAAC,OACXF,EAAeE,EAAEoB,OAAOT,QACxBU,aAAa,QAEb,wBAAQN,UAAU,6BAAlB,wBCOGO,EA7CO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEpB,EAAsC3B,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEM0B,EAAUD,EAAKE,QAGfC,EAAa,uCAAG,WAAO1B,GAAP,eAAAC,EAAA,yDAElBD,EAAEE,iBAFgB,SAKM,KAAhBL,EALU,8CASJM,EAAO,CAAEqB,UAAS3B,eATd,SAWaO,MAAM,gDAAiD,CAC1EC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BH,KAAMI,KAAKC,UAAUL,KAdf,cAiBVM,SAASC,cAAT,wBAAwCa,EAAKE,UAAWd,MAAQ,GAjBtD,0DAoBdC,QAAQC,MAAM,KAAIC,SApBJ,0DAAH,sDAuBnB,OACI,uBAAMC,UAAU,cAAcC,SAAUU,EAAxC,UACA,uBAAOT,KAAK,OACRU,GAAE,uBAAkBJ,EAAKE,SACzBV,UAAU,eACVG,YAAY,gBACZC,SAAU,SAAAnB,GAAC,OACXF,EAAeE,EAAEoB,OAAOT,UAE5B,uBAAOM,KAAK,SAASN,MAAQ,MAAMI,UAAU,wBC6CtCa,EAnFM,SAAC,GAAY,IAAXL,EAAU,EAAVA,KAGnB,EAAsC3B,mBAAS,IAA/C,mBAAOiC,EAAP,KAAoBC,EAApB,KAEMC,EAAW,uCAAG,WAAOJ,GAAP,iBAAA1B,EAAA,+EAGWG,MAAM,iDAAD,OAAkDuB,IAHlE,cAGNK,EAHM,gBAIWA,EAASC,OAJpB,OAINC,EAJM,OAKZJ,EAAeI,GALH,kDAOZtB,QAAQC,MAAM,KAAIC,SAPN,0DAAH,sDAWXqB,EAAa,uCAAG,WAAOnC,EAAE2B,EAAIS,GAAb,iBAAAnC,EAAA,sEAGdD,EAAEE,iBACIL,EAAcY,SAASC,cAAT,uBAAuC0B,IAAczB,MACnE0B,EAAa,CAAExC,eALP,SAMcO,MAAM,iDAAD,OAAkDuB,EAAlD,YAAwDS,GAAc,CACnG/B,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BH,KAAMI,KAAKC,UAAU6B,KATX,8DAYdzB,QAAQC,MAAM,KAAIC,SAZJ,yDAAH,0DAgBbwB,EAAU,uCAAG,WAAOX,EAAIS,GAAX,SAAAnC,EAAA,+EAGcG,MAAM,iDAAD,OAAkDuB,EAAlD,YAAwDS,GAAc,CAChG/B,OAAQ,WAJD,cAOXyB,EAAeD,EAAYU,QAAO,SAAAC,GAAO,OAAIA,EAAQJ,aAAeA,MAPzD,gDASXxB,QAAQC,MAAM,KAAIC,SATP,yDAAH,wDAkBhB,OAJA2B,qBAAU,WACNV,EAAYR,EAAKE,WAClB,CAACI,IAGJ,eAAC,WAAD,WACK,IACD,uBAAOd,UAAU,yBAAjB,SACI,gCACKc,EAAYa,KAAI,SAAAF,GAAO,OACpB,+BACI,6BACI,sBAAMxB,SAAU,SAAAhB,GAAC,OAAImC,EAAcnC,EAAEuB,EAAKE,QAASe,EAAQJ,aAA3D,SACI,uBAAOnB,KAAO,OACdU,GAAE,sBAAiBa,EAAQJ,YAC3BO,aAAcH,EAAQ3C,YACtB+C,OAAQ,kBAAMnC,SAASoC,eAAT,sBAAuCL,EAAQJ,aAAczB,MAAQ6B,EAAQ3C,mBAMnG,6BACI,wBAAQkB,UAAU,iBAClB+B,QAAS,kBAAMR,EAAWf,EAAKE,QAASe,EAAQJ,aADhD,wBAbCI,EAAQJ,uBCatBW,EAlEE,SAAC,GAAY,IAAXxB,EAAU,EAAVA,KAEf,EAAsC3B,mBAAS2B,EAAK1B,aAApD,mBAAOA,EAAP,KAAoBC,EAApB,KAGMkD,EAAiB,uCAAG,WAAOhD,GAAP,eAAAC,EAAA,6DAEtBD,EAAEE,iBAFoB,SAKZC,EAAO,CAAEN,eALG,SAMKO,MAAM,8CAAD,OAA+CmB,EAAKE,SAAW,CACvFpB,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BH,KAAMI,KAAKC,UAAUL,KATP,cAYlBL,EAAeD,GAZG,gDAclBe,QAAQC,MAAM,KAAMC,SAdF,yDAAH,sDAkBvB,OACI,eAAC,WAAD,WAEI,wBACIG,KAAK,SACLF,UAAU,kBACVkC,cAAY,QACZC,cAAA,aAAmB3B,EAAKE,SAJ5B,kBAQA,qBAAKV,UAAU,QAAQY,GAAE,YAAOJ,EAAKE,SAAWqB,QAAS,kBAAMhD,EAAeyB,EAAK1B,cAAnF,SACI,qBAAKkB,UAAU,eAAf,SACI,sBAAKA,UAAU,gBAAf,UAEI,sBAAKA,UAAU,eAAf,UACI,uBAAOE,KAAM,OAAOF,UAAU,eAAeJ,MAAQd,EAAasB,SAAU,SAAAnB,GAAC,OACrEF,EAAeE,EAAEoB,OAAOT,UAChC,wBAAQM,KAAK,SAASF,UAAU,QAAQoC,eAAa,QAAQL,QAAS,kBAAMhD,EAAeyB,EAAK1B,cAAhG,qBAGJ,sBAAKkB,UAAU,aAAf,UACI,0CACA,cAAC,EAAD,CAAcQ,KAAMA,IACpB,cAAC,EAAD,CAAeA,KAAMA,OAGzB,sBAAKR,UAAU,eAAf,UACI,wBAAQE,KAAK,SAASF,UAAU,kBAAkBoC,eAAa,QAAQL,QAAS,SAAA9C,GAAC,OAAIgD,EAAkBhD,IAAvG,kBAGA,wBAAQiB,KAAK,SAASF,UAAU,iBAAiBoC,eAAa,QAAQL,QAAS,kBAAMhD,EAAeyB,EAAK1B,cAAzG,iCCmBbuD,EA5EE,WAGb,MAA0BxD,mBAAS,IAAnC,mBAAOyD,EAAP,KAAcC,EAAd,KAEMC,EAAQ,uCAAG,8BAAAtD,EAAA,+EAGcG,MAAM,8CAHpB,cAGH4B,EAHG,gBAIcA,EAASC,OAJvB,OAIHC,EAJG,OAKToB,EAASpB,GALA,kDAOTtB,QAAQC,MAAM,KAAIC,SAPT,0DAAH,qDAWRwB,EAAU,uCAAG,WAAOX,GAAP,SAAA1B,EAAA,+EAGcG,MAAM,8CAAD,OAA+CuB,GAAM,CAC/EtB,OAAQ,WAJD,qBAQXiD,EAASD,EAAMd,QAAO,SAAAhB,GAAI,OAAIA,EAAKE,UAAYE,MARpC,SAWkBvB,MAAM,iDAAD,OAAkDuB,GAAM,CACtFtB,OAAQ,WAZD,gEAgBXO,QAAQC,MAAM,KAAIC,SAhBP,0DAAH,sDAyBhB,OAJA2B,qBAAU,WACNc,MACD,CAACF,IAEI,eAAC,WAAD,WACH,IACD,wBAAOtC,UAAU,oCAAjB,UACI,gCACI,+BACI,oBAAIyC,MAAM,MAAV,yBACA,oBAAIA,MAAM,MAAV,2BACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,8BAGR,gCACKH,EAAMX,KAAI,SAAAnB,GAAI,OAEX,+BACI,oBAAIR,UAAU,YAAd,SAA2BQ,EAAK1B,cAChC,mCAAK,wBAAQkB,UAAU,gCAAlB,0BACL,6BACI,cAAC,EAAD,CAAUQ,KAAMA,MAEpB,6BACI,wBAAQR,UAAU,iBAClB+B,QAAS,kBAAMR,EAAWf,EAAKE,UAD/B,wBAPCF,EAAKE,qB,cCbnBgC,MAzCf,WACI,OACE,qBAAK1C,UAAU,WAAf,SACE,cAAC,aAAD,CAGI2C,SAAU,YAAc,EAAZC,QAGZC,MAAO,CACL,CACEC,MAAO,WACPF,OAAQ,aAGV,CACEE,MAAO,WACPF,OAAQ,aAGV,CACEE,MAAO,QACPF,OAAQ,SAERG,OAAQ,CACN,CACED,MAAO,aACPF,OAAQ,oBAEV,CACEE,MAAO,UACPF,OAAQ,0BCjBbI,G,MAZC,WACZ,OACI,sBAAKhD,UAAU,YAAf,UACI,cAAC,EAAD,IACJ,sBAAKA,UAAU,WAAf,UACI,cAACiD,EAAD,IACA,cAAC,EAAD,Y,QClBG,MAA0B,qCCoB1BC,EAdC,WACZ,OACI,sBAAKlD,UAAU,SAAf,UACI,mBAAGmD,KAAK,IAAR,SAAY,qBAAKnD,UAAU,WAC3B,sBAAKA,UAAU,UAAf,UACI,mBAAGmD,KAAK,IAAR,SAAY,yCACZ,mBAAGA,KAAK,IAAR,SAAY,0CACZ,mBAAGA,KAAK,IAAR,SAAY,gDAEhB,cAACC,EAAA,EAAD,CAAQC,IAAI,WAAWC,IAAKC,EAASvD,UAAU,oBCU5CwD,MATf,WACE,OACI,eAAC,WAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,QCROC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1E,SAASoC,eAAe,SAG1B2B,M","file":"static/js/main.957bb29f.chunk.js","sourcesContent":["// Imports\nimport React, { Fragment,useState } from \"react\";\n\n/**\n * A functional component representing the input of a task\n * @returns JSX of input field and add button\n */\nconst InputToDo = () => {\n\n    // Description of a task\n    const [description, setDescription] = useState(\"\");\n    \n    const onSubmitForm = async e => {\n        \n        // Prevents page from reloading on form submission\n        e.preventDefault();\n        try {\n            if (description === \"\") {\n                // If task field is empty, do not submit anything\n            } else {\n                // Sends a request to create the new task in server\n                const body = { description };\n                const response = await fetch(\"https://tickaholic-app.herokuapp.com/todos\", {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\"},\n                    body: JSON.stringify(body)\n                });\n                \n                // Reset the input field to empty upon successful task submission\n                document.querySelector(\".add_task\").value = \"\";\n            }\n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    return (\n        <Fragment>\n          <form className=\"d-flex\" onSubmit={onSubmitForm} >\n            <input type=\"text\"\n            className=\"form-control add_task\" \n            placeholder= \"Input task\"\n            onChange={e =>\n            setDescription(e.target.value)}\n            autoComplete=\"off\"/>\n            \n            <button className=\"btn btn-success add_button\"> Add</button>\n        </form>\n        </ Fragment>\n    );\n};\n\nexport default InputToDo;\n","// Imports\nimport React, { Fragment, useState } from 'react';\n\n/**\n * A functional component for inputting subtasks\n * @param {object} todo - A main task object. \n * @returns JSX of Input subtask field\n */\nconst InputSubtasks = ({todo}) => {\n    // Subtask description\n    const [description, setDescription] = useState(\"\");\n    // main task id linked to group of subtasks\n    const task_id = todo.todo_id;\n\n\n    const submitSubtask = async (e) => {\n        // Prevents the page from reloading\n        e.preventDefault();\n        try {\n            // If there is empty input, do not submit!\n            if (description === \"\") {\n\n            } else {\n                // Create new object with task_id and description\n                const body = { task_id, description };\n                // Send a request to create the new subtask to server \n                const response = await fetch(\"https://tickaholic-app.herokuapp.com/subtasks\", {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\"},\n                    body: JSON.stringify(body)\n                });\n                // Reset the input field to empty string after subtask submission\n                document.querySelector(`#input_subtask${todo.todo_id}`).value = \"\";\n            }\n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n    return (\n        <form className=\"d-flex mt-5\" onSubmit={submitSubtask}>\n        <input type=\"text\" \n            id={`input_subtask${todo.todo_id}`}\n            className=\"form-control\"\n            placeholder=\"Input subtask\"\n            onChange={e =>\n            setDescription(e.target.value)}/>\n\n        <input type=\"submit\" value = \"Add\" className=\"btn-success btn\"/>\n        </form>\n    );\n};\n\n\nexport default InputSubtasks;","// Imports\nimport React, { Fragment, useEffect, useState } from \"react\";\n\n\n/**\n * Component that handles listing of subtasks.\n * @param {object} todo - A main task object.\n * @returns JSX of listing of subtasks\n */\nconst ListSubtasks = ({todo}) => {\n\n    // List of subtasks pertaining to todo\n    const [subtaskList, setSubtaskList] = useState([]);\n    \n    const getSubtasks = async (id) => {\n        try {\n            // Calls the GET all subtasks route method\n            const response = await fetch(`https://tickaholic-app.herokuapp.com/subtasks/${id}`);\n            const jsonData = await response.json();\n            setSubtaskList(jsonData);\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    const updateSubtask = async (e,id, subtask_id) => {\n        try {\n            // Calls the UPDATE subtask route method\n            e.preventDefault();\n            const description = document.querySelector(`#edit_subtask${subtask_id}`).value;\n            const submitThis = { description };\n            const updateSubtask = await fetch(`https://tickaholic-app.herokuapp.com/subtasks/${id}/${subtask_id}`, {\n                method: \"PUT\",\n                headers: { \"Content-Type\": \"application/json\"},\n                body: JSON.stringify(submitThis)\n            });\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    const deleteTodo = async (id, subtask_id) => {\n        try {\n            // Calls the DELETE subtask route method\n            const deleteTodo = await fetch(`https://tickaholic-app.herokuapp.com/subtasks/${id}/${subtask_id}`, {\n                method: \"DELETE\"\n            });\n            // Update subtaskList to contain subtasks which have not been deleted\n            setSubtaskList(subtaskList.filter(subtask => subtask.subtask_id !== subtask_id));\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    // Updates once subtasklist is changed\n    useEffect(() => {\n        getSubtasks(todo.todo_id);\n    }, [subtaskList]);\n    \n    return (\n    <Fragment>\n        {\" \"}\n        <table className=\"table mt-5 text-center\">\n            <tbody>\n                {subtaskList.map(subtask => (\n                    <tr key={subtask.subtask_id}>\n                        <td>\n                            <form onSubmit={e => updateSubtask(e,todo.todo_id, subtask.subtask_id)}>\n                                <input type = 'text'\n                                id={`edit_subtask${subtask.subtask_id}`}\n                                defaultValue={subtask.description}\n                                onBlur={() => document.getElementById(`edit_subtask${subtask.subtask_id}`).value = subtask.description}\n                                />\n                          \n                            </form>\n                            \n                        </td>\n                        <td>\n                            <button className=\"btn btn-danger\" \n                            onClick={() => deleteTodo(todo.todo_id, subtask.subtask_id)}\n                            >\n                                Delete\n                            </button>\n                        </td>\n                    </tr>\n                ))}\n\n            </tbody>\n        </table>\n    </Fragment>);\n};\n\nexport default ListSubtasks;","// Import react modules\nimport React, { Fragment, useState } from 'react';\n\n// Import \nimport InputSubtasks from \"./subtasks/InputSubtasks\";\nimport ListSubtasks from './subtasks/ListSubtasks';\n\n/**\n * A functional component for inputting subtasks\n * @param {object} todo - A main task object. \n * @returns JSX of task modal window\n */\nconst EditTodo = ({todo}) => {\n    // Main task description\n    const [description, setDescription] = useState(todo.description);\n    \n    // Update task description\n    const updateDescription = async (e) => {\n        // Prevents page from reloading\n        e.preventDefault();\n        try {\n            // Sends updated description of main task to server\n            const body = { description };\n            const response = await fetch(`https://tickaholic-app.herokuapp.com/todos/${todo.todo_id}`, {\n                method: \"PUT\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(body)\n            });\n            // Sets description on modal header after clicking edit\n            setDescription(description);\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n\n    return (\n        <Fragment>\n            {/* Button to activate modal */}\n            <button \n                type=\"button\" \n                className=\"btn btn-warning\" \n                data-toggle=\"modal\" \n                data-target={`#id${todo.todo_id}`}>\n                Edit\n            </button>\n            {/* Modal */}\n            <div className=\"modal\" id={`id${todo.todo_id}`} onClick={() => setDescription(todo.description)}>\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                    \n                        <div className=\"modal-header\">\n                            <input type ='text' className=\"form-control\" value ={description} onChange={e =>\n                                    setDescription(e.target.value)}/>\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={() => setDescription(todo.description)}>&times;</button>\n                        </div>\n\n                        <div className=\"modal-body\">\n                            <h4>Subtasks</h4>\n                            <ListSubtasks todo={todo} />\n                            <InputSubtasks todo={todo}/>\n                        </div>\n                    \n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-warning\" data-dismiss=\"modal\" onClick={e => updateDescription(e)}>\n                                Edit\n                            </button>\n                            <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" onClick={() => setDescription(todo.description)}>\n                                Close\n                            </button>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default EditTodo;","// Imports\nimport React, { Fragment, useEffect, useState } from \"react\";\n\nimport EditTodo from \"./EditTodo\";\n\n/**\n * A functional component representing a list of main tasks\n * @returns JSX of main tasks list\n */\nconst ListTodo = () => {\n    \n    // Array of main tasks\n    const [todos, setTodos] = useState([]);\n    \n    const getTodos = async() => {\n        try {\n            // Calls the GET all tasks route method\n            const response = await fetch(\"https://tickaholic-app.herokuapp.com/todos\");\n            const jsonData = await response.json();\n            setTodos(jsonData);\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n    \n    const deleteTodo = async (id) => {\n        try {\n            // Calls the DELETE task route method\n            const deleteTodo = await fetch(`https://tickaholic-app.herokuapp.com/todos/${id}`, {\n                method: \"DELETE\"\n            });\n\n            // Sets the array of main tasks to exclude the newly deleted task\n            setTodos(todos.filter(todo => todo.todo_id !== id));\n\n            // Calls the DELETE subtasks route method\n            const deleteSubtasks = await fetch(`https://tickaholic-app.herokuapp.com/subtasks/${id}`, {\n                method: \"DELETE\"\n            });\n\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    // Updates whenever main tasks list changes\n    useEffect(() => {\n        getTodos();\n    }, [todos]);\n    \n    return (<Fragment>\n        {\" \"}\n        <table className=\"table mt-5 text-center task_table\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Complete Task</th>\n                    <th scope=\"col\">Edit Task</th>\n                    <th scope=\"col\">Delete Task</th>\n                </tr>\n            </thead>\n            <tbody>\n                {todos.map(todo => (\n                \n                    <tr key={todo.todo_id}>\n                        <td className=\"task_name\">{todo.description}</td>\n                        <td> <button className=\"btn btn-success complete_task\">COMPLETE!</button></td>\n                        <td>\n                            <EditTodo todo={todo}/>\n                        </td>\n                        <td>\n                            <button className=\"btn btn-danger\" \n                            onClick={() => deleteTodo(todo.todo_id)}\n                            >\n                                Delete\n                            </button>\n                        </td>\n                    </tr>\n                ))}\n\n            </tbody>\n        </table>\n    </Fragment>);\n};\n\nexport default ListTodo;","// Imports\nimport React, { Fragment } from 'react';\n\nimport {Navigation} from 'react-minimal-side-navigation';\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\n\n/**\n * A functional component representing a side bar\n * @returns JSX of a sidebar component\n */\nfunction SideBar() {\n    return (\n      <div className=\"side_bar\">\n        <Navigation\n            // Path to be added\n            // activeItemId=\"/management/members\"\n            onSelect={({itemId}) => {\n              // maybe push to the route\n            }}\n            items={[\n              {\n                title: 'Overview',\n                itemId: '/overview',\n                // elemBefore: () => <Icon name=\"inbox\" />,\n              },\n              {\n                title: 'Calendar',\n                itemId: '/calendar',\n                // elemBefore: () => <Icon name=\"inbox\" />,\n              },\n              {\n                title: 'Lists',\n                itemId: '/lists',\n                // elemBefore: () => <Icon name=\"users\" />,\n                subNav: [\n                  {\n                    title: 'Main Tasks',\n                    itemId: '/lists/maintasks',\n                  },\n                  {\n                    title: 'GER1000',\n                    itemId: '/lists/ger1000',\n                  },\n                ],\n              }\n            ]}\n          />\n      </div>\n    );\n}\n\nexport default SideBar;\n","// Imports\nimport React from 'react';\n\nimport InputTodo from \"./InputTodo\";\nimport ListTodo from \"./ListTodo\";\nimport SideBar from \"./SideBar\";\nimport \"../design/TaskBox.css\";\n\n/**\n * A functional component representing where tasks are displayed\n * @returns JSX of taskbox component\n */\nconst TaskBox = () => {\n    return (\n        <div className=\"outer_box\">\n            <SideBar />\n        <div className=\"task_box\">\n            <InputTodo />\n            <ListTodo />\n        </div>\n        </div>\n    );\n};\n\nexport default TaskBox;","export default __webpack_public_path__ + \"static/media/meileng.2130a9c1.jpeg\";","// Imports\nimport React from 'react';\nimport \"../design/TaskBox.css\";\nimport { Avatar } from '@material-ui/core';\nimport profile from '../meileng.jpeg';\n\nconst Heading = () => {\n    return (\n        <div className=\"header\">\n            <a href=\"#\"><div className=\"logo\"></div></a>\n            <nav className=\"top_nav\">\n                <a href=\"#\"><div>Home</div></a>\n                <a href=\"#\"><div>Learn</div></a>\n                <a href=\"#\"><div>Settings</div></a>\n            </nav>\n            <Avatar alt=\"Mei Leng\" src={profile} className=\"profile_pic\" />\n        </div>\n    );\n};\n\nexport default Heading;","// Imports\nimport React, { Fragment, useState } from 'react';\n\nimport './App.css';\n\n// Components\nimport InputToDo from './components/InputTodo';\nimport ListTodo from \"./components/ListTodo\";\nimport TaskBox from \"./components/TaskBox\";\nimport Heading from \"./components/Heading\";\nimport EditTodo from './components/EditTodo';\n\n/**\n * Functional Component of our main app\n * @returns JSX for our main app\n */\nfunction App() {\n  return (\n      <Fragment>\n        <Heading />\n        <TaskBox />\n      </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}